//
// FooPlsView.swift
// Generated by Core Animator version 1.5 on 05/12/2017.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

import UIKit

private class _FooPlsPassthroughView: UIView {
    override func point(inside point: CGPoint, with event: UIEvent?) -> Bool {
        for subview in subviews as [UIView] {
            if subview.point(inside: convert(point, to: subview), with: event) { return true }
        }
        return false
    }
}

@IBDesignable
class FooPlsView : UIView, CAAnimationDelegate {


	var animationCompletions = Dictionary<CAAnimation, (Bool) -> Void>()
	var viewsByName: [String : UIView]!

	// - MARK: Life Cycle

	convenience init() {
		self.init(frame: CGRect(x: 0, y: 0, width: 375, height: 667))
	}

	override init(frame: CGRect) {
		super.init(frame: frame)
		self.setupHierarchy()
	}

	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		self.setupHierarchy()
	}

	// - MARK: Scaling

	override func layoutSubviews() {
		super.layoutSubviews()

		if let scalingView = self.viewsByName["__scaling__"] {
			var xScale = self.bounds.size.width / scalingView.bounds.size.width
			var yScale = self.bounds.size.height / scalingView.bounds.size.height
			switch contentMode {
			case .scaleToFill:
				break
			case .scaleAspectFill:
				let scale = max(xScale, yScale)
				xScale = scale
				yScale = scale
			default:
				let scale = min(xScale, yScale)
				xScale = scale
				yScale = scale
			}
			scalingView.transform = CGAffineTransform(scaleX: xScale, y: yScale)
			scalingView.center = CGPoint(x:self.bounds.midX, y:self.bounds.midY)
		}
	}

	// - MARK: Setup

	func setupHierarchy() {
		var viewsByName: [String : UIView] = [:]
		let bundle = Bundle(for:type(of: self))
		let __scaling__ = UIView()
		__scaling__.bounds = CGRect(x:0, y:0, width:375, height:667)
		__scaling__.center = CGPoint(x:187.5, y:333.5)
		__scaling__.clipsToBounds = true
		self.addSubview(__scaling__)
		viewsByName["__scaling__"] = __scaling__

		let fooPls__root = _FooPlsPassthroughView()
		let fooPls__xScale = _FooPlsPassthroughView()
		let fooPls__yScale = _FooPlsPassthroughView()
		let fooPls = UIImageView()
		let imgFooPls = UIImage(named:"FooPls.png", in: bundle, compatibleWith: nil)
		if imgFooPls == nil {
			print("** Warning: Could not create image from 'FooPls.png'")
		}
		fooPls.image = imgFooPls
		fooPls.contentMode = .center
		fooPls.bounds = CGRect(x:0, y:0, width:198.0, height:73.0)
		fooPls__root.layer.position = CGPoint(x:187.500, y:402.190)
		fooPls__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		fooPls__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		fooPls__root.transform = CGAffineTransform(rotationAngle: 0.000)
		fooPls__root.addSubview(fooPls__xScale)
		fooPls__xScale.addSubview(fooPls__yScale)
		fooPls__yScale.addSubview(fooPls)
		__scaling__.addSubview(fooPls__root)
		viewsByName["FooPls__root"] = fooPls__root
		viewsByName["FooPls__xScale"] = fooPls__xScale
		viewsByName["FooPls__yScale"] = fooPls__yScale
		viewsByName["FooPls"] = fooPls

		let body__root = _FooPlsPassthroughView()
		let body__xScale = _FooPlsPassthroughView()
		let body__yScale = _FooPlsPassthroughView()
		let body = UIImageView()
		let img4 = UIImage(named:"4.png", in: bundle, compatibleWith: nil)
		if img4 == nil {
			print("** Warning: Could not create image from '4.png'")
		}
		body.image = img4
		body.contentMode = .center
		body.bounds = CGRect(x:0, y:0, width:842.0, height:1191.0)
		body__root.layer.position = CGPoint(x:187.500, y:228.693)
		body__xScale.transform = CGAffineTransform(scaleX: 0.25, y: 1.00)
		body__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.25)
		body__root.transform = CGAffineTransform(rotationAngle: 0.000)
		body__root.addSubview(body__xScale)
		body__xScale.addSubview(body__yScale)
		body__yScale.addSubview(body)
		__scaling__.addSubview(body__root)
		viewsByName["body__root"] = body__root
		viewsByName["body__xScale"] = body__xScale
		viewsByName["body__yScale"] = body__yScale
		viewsByName["body"] = body

		let rightLeg__root = _FooPlsPassthroughView()
		let rightLeg__xScale = _FooPlsPassthroughView()
		let rightLeg__yScale = _FooPlsPassthroughView()
		let rightLeg = UIImageView()
		let imgLeg = UIImage(named:"leg.png", in: bundle, compatibleWith: nil)
		if imgLeg == nil {
			print("** Warning: Could not create image from 'leg.png'")
		}
		rightLeg.image = imgLeg
		rightLeg.contentMode = .center
		rightLeg.layer.anchorPoint = CGPoint(x:0.474, y:0.450)
		rightLeg.bounds = CGRect(x:0, y:0, width:842.0, height:1191.0)
		rightLeg__root.layer.position = CGPoint(x:187.000, y:252.000)
		rightLeg__xScale.transform = CGAffineTransform(scaleX: 0.25, y: 1.00)
		rightLeg__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.25)
		rightLeg__root.transform = CGAffineTransform(rotationAngle: 0.000)
		rightLeg__root.addSubview(rightLeg__xScale)
		rightLeg__xScale.addSubview(rightLeg__yScale)
		rightLeg__yScale.addSubview(rightLeg)
		__scaling__.addSubview(rightLeg__root)
		viewsByName["rightLeg__root"] = rightLeg__root
		viewsByName["rightLeg__xScale"] = rightLeg__xScale
		viewsByName["rightLeg__yScale"] = rightLeg__yScale
		viewsByName["rightLeg"] = rightLeg

		let leftLeg__root = _FooPlsPassthroughView()
		let leftLeg__xScale = _FooPlsPassthroughView()
		let leftLeg__yScale = _FooPlsPassthroughView()
		let leftLeg = UIImageView()
		leftLeg.image = imgLeg
		leftLeg.contentMode = .center
		leftLeg.layer.anchorPoint = CGPoint(x:0.474, y:0.450)
		leftLeg.bounds = CGRect(x:0, y:0, width:842.0, height:1191.0)
		leftLeg__root.layer.position = CGPoint(x:187.000, y:252.000)
		leftLeg__xScale.transform = CGAffineTransform(scaleX: 0.25, y: 1.00)
		leftLeg__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.25)
		leftLeg__root.transform = CGAffineTransform(rotationAngle: 1.905)
		leftLeg__root.addSubview(leftLeg__xScale)
		leftLeg__xScale.addSubview(leftLeg__yScale)
		leftLeg__yScale.addSubview(leftLeg)
		__scaling__.addSubview(leftLeg__root)
		viewsByName["leftLeg__root"] = leftLeg__root
		viewsByName["leftLeg__xScale"] = leftLeg__xScale
		viewsByName["leftLeg__yScale"] = leftLeg__yScale
		viewsByName["leftLeg"] = leftLeg

		self.viewsByName = viewsByName
	}

	// - MARK: splashLoading

	func addSplashLoadingAnimation() {
		addSplashLoadingAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addSplashLoadingAnimation(completion: ((Bool) -> Void)?) {
		addSplashLoadingAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addSplashLoadingAnimation(removedOnCompletion: Bool) {
		addSplashLoadingAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addSplashLoadingAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addSplashLoadingAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addSplashLoadingAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let easeOutTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseOut)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 4.250
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "SplashLoading")
			self.animationCompletions[layer.animation(forKey: "SplashLoading")!] = complete
		}

		let rightLegRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		rightLegRotationAnimation.duration = 4.250
		rightLegRotationAnimation.values = [0.000, 1.902, 0.000, 1.902, 0.000, 1.902, 0.000, 1.902, 0.000, 0.000] as [Float]
		rightLegRotationAnimation.keyTimes = [0.000, 0.106, 0.212, 0.318, 0.412, 0.518, 0.624, 0.729, 0.824, 1.000] as [NSNumber]
		rightLegRotationAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		rightLegRotationAnimation.beginTime = beginTime
		rightLegRotationAnimation.fillMode = fillMode
		rightLegRotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["rightLeg__root"]?.layer.add(rightLegRotationAnimation, forKey:"splashLoading_Rotation")

		let rightLegTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		rightLegTranslationXAnimation.duration = 4.250
		rightLegTranslationXAnimation.values = [-240.000, -209.143, -178.286, -147.429, -120.000, -89.143, -58.286, -27.429, 0.000, 0.000] as [Float]
		rightLegTranslationXAnimation.keyTimes = [0.000, 0.106, 0.212, 0.318, 0.412, 0.518, 0.624, 0.729, 0.824, 1.000] as [NSNumber]
		rightLegTranslationXAnimation.timingFunctions = [easeOutTiming, easeOutTiming, easeOutTiming, easeOutTiming, easeOutTiming, easeOutTiming, easeOutTiming, easeOutTiming, linearTiming]
		rightLegTranslationXAnimation.beginTime = beginTime
		rightLegTranslationXAnimation.fillMode = fillMode
		rightLegTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["rightLeg__root"]?.layer.add(rightLegTranslationXAnimation, forKey:"splashLoading_TranslationX")

		let rightLegTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		rightLegTranslationYAnimation.duration = 4.250
		rightLegTranslationYAnimation.values = [0.000, -25.000, 0.000, -25.000, 0.000, -25.000, 0.000, -25.000, 0.000, -25.000, 0.000, -25.000, 0.000, -25.000, 0.000, -25.000, 0.000, 0.000] as [Float]
		rightLegTranslationYAnimation.keyTimes = [0.000, 0.059, 0.106, 0.165, 0.212, 0.271, 0.318, 0.365, 0.412, 0.471, 0.518, 0.565, 0.624, 0.682, 0.729, 0.776, 0.824, 1.000] as [NSNumber]
		rightLegTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		rightLegTranslationYAnimation.beginTime = beginTime
		rightLegTranslationYAnimation.fillMode = fillMode
		rightLegTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["rightLeg__root"]?.layer.add(rightLegTranslationYAnimation, forKey:"splashLoading_TranslationY")

		let leftLegRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		leftLegRotationAnimation.duration = 4.250
		leftLegRotationAnimation.values = [1.905, 0.000, 1.902, 0.000, 1.902, 0.000, 1.902, 0.000, 1.902, 1.902] as [Float]
		leftLegRotationAnimation.keyTimes = [0.000, 0.106, 0.212, 0.318, 0.412, 0.518, 0.624, 0.729, 0.824, 1.000] as [NSNumber]
		leftLegRotationAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		leftLegRotationAnimation.beginTime = beginTime
		leftLegRotationAnimation.fillMode = fillMode
		leftLegRotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["leftLeg__root"]?.layer.add(leftLegRotationAnimation, forKey:"splashLoading_Rotation")

		let leftLegTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		leftLegTranslationXAnimation.duration = 4.250
		leftLegTranslationXAnimation.values = [-240.000, -209.143, -178.286, -147.429, -120.000, -89.143, -58.286, -27.429, 0.000, 0.000] as [Float]
		leftLegTranslationXAnimation.keyTimes = [0.000, 0.106, 0.212, 0.318, 0.412, 0.518, 0.624, 0.729, 0.824, 1.000] as [NSNumber]
		leftLegTranslationXAnimation.timingFunctions = [easeOutTiming, easeOutTiming, easeOutTiming, easeOutTiming, easeOutTiming, easeOutTiming, easeOutTiming, easeOutTiming, linearTiming]
		leftLegTranslationXAnimation.beginTime = beginTime
		leftLegTranslationXAnimation.fillMode = fillMode
		leftLegTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["leftLeg__root"]?.layer.add(leftLegTranslationXAnimation, forKey:"splashLoading_TranslationX")

		let leftLegTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		leftLegTranslationYAnimation.duration = 4.250
		leftLegTranslationYAnimation.values = [0.000, -25.000, 0.000, -25.000, 0.000, -25.000, 0.000, -25.000, 0.000, -25.000, 0.000, -25.000, 0.000, -25.000, 0.000, -25.000, 0.000, 0.000] as [Float]
		leftLegTranslationYAnimation.keyTimes = [0.000, 0.059, 0.106, 0.165, 0.212, 0.271, 0.318, 0.365, 0.412, 0.471, 0.518, 0.565, 0.624, 0.682, 0.729, 0.776, 0.824, 1.000] as [NSNumber]
		leftLegTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		leftLegTranslationYAnimation.beginTime = beginTime
		leftLegTranslationYAnimation.fillMode = fillMode
		leftLegTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["leftLeg__root"]?.layer.add(leftLegTranslationYAnimation, forKey:"splashLoading_TranslationY")

		let bodyTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		bodyTranslationXAnimation.duration = 4.250
		bodyTranslationXAnimation.values = [-240.000, -209.143, -178.286, -147.429, -120.000, -89.143, -58.286, -27.429, 0.000, 0.000] as [Float]
		bodyTranslationXAnimation.keyTimes = [0.000, 0.106, 0.212, 0.318, 0.412, 0.518, 0.624, 0.729, 0.824, 1.000] as [NSNumber]
		bodyTranslationXAnimation.timingFunctions = [easeOutTiming, easeOutTiming, easeOutTiming, easeOutTiming, easeOutTiming, easeOutTiming, easeOutTiming, easeOutTiming, linearTiming]
		bodyTranslationXAnimation.beginTime = beginTime
		bodyTranslationXAnimation.fillMode = fillMode
		bodyTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["body__root"]?.layer.add(bodyTranslationXAnimation, forKey:"splashLoading_TranslationX")

		let bodyTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		bodyTranslationYAnimation.duration = 4.250
		bodyTranslationYAnimation.values = [0.000, -20.000, 0.000, -20.000, 0.000, -20.000, 0.000, -20.000, 0.000, -20.000, 0.000, -20.000, 0.000, -20.000, 0.000, -20.000, 0.000, 0.000] as [Float]
		bodyTranslationYAnimation.keyTimes = [0.000, 0.059, 0.106, 0.165, 0.212, 0.271, 0.318, 0.365, 0.412, 0.471, 0.518, 0.565, 0.624, 0.682, 0.729, 0.776, 0.824, 1.000] as [NSNumber]
		bodyTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		bodyTranslationYAnimation.beginTime = beginTime
		bodyTranslationYAnimation.fillMode = fillMode
		bodyTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["body__root"]?.layer.add(bodyTranslationYAnimation, forKey:"splashLoading_TranslationY")

		let fooPlsOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		fooPlsOpacityAnimation.duration = 4.250
		fooPlsOpacityAnimation.values = [0.000, 0.000, 1.000] as [Float]
		fooPlsOpacityAnimation.keyTimes = [0.000, 0.824, 1.000] as [NSNumber]
		fooPlsOpacityAnimation.timingFunctions = [linearTiming, linearTiming]
		fooPlsOpacityAnimation.beginTime = beginTime
		fooPlsOpacityAnimation.fillMode = fillMode
		fooPlsOpacityAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["FooPls__root"]?.layer.add(fooPlsOpacityAnimation, forKey:"splashLoading_Opacity")
	}

	func removeSplashLoadingAnimation() {
		self.layer.removeAnimation(forKey: "SplashLoading")
		self.viewsByName["rightLeg__root"]?.layer.removeAnimation(forKey: "splashLoading_Rotation")
		self.viewsByName["rightLeg__root"]?.layer.removeAnimation(forKey: "splashLoading_TranslationX")
		self.viewsByName["rightLeg__root"]?.layer.removeAnimation(forKey: "splashLoading_TranslationY")
		self.viewsByName["leftLeg__root"]?.layer.removeAnimation(forKey: "splashLoading_Rotation")
		self.viewsByName["leftLeg__root"]?.layer.removeAnimation(forKey: "splashLoading_TranslationX")
		self.viewsByName["leftLeg__root"]?.layer.removeAnimation(forKey: "splashLoading_TranslationY")
		self.viewsByName["body__root"]?.layer.removeAnimation(forKey: "splashLoading_TranslationX")
		self.viewsByName["body__root"]?.layer.removeAnimation(forKey: "splashLoading_TranslationY")
		self.viewsByName["FooPls__root"]?.layer.removeAnimation(forKey: "splashLoading_Opacity")
	}

	// MARK: CAAnimationDelegate
	func animationDidStop(_ anim: CAAnimation, finished flag: Bool) {
		if let completion = self.animationCompletions[anim] {
			self.animationCompletions.removeValue(forKey: anim)
			completion(flag)
		}
	}

	func removeAllAnimations() {
		for subview in viewsByName.values {
			subview.layer.removeAllAnimations()
		}
		self.layer.removeAnimation(forKey: "SplashLoading")
	}
}